swagger: "2.0"
info:
  description: "This is the backend application with the APIs of the Automotive App"
  version: "1.0.0"
  title: "Android Automotive Backend Documentation"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
tags:
  - name: "Administration - OEM-Web Frontend"
    description: "Any operations possible as oem (via the web UI)"
  - name: "Client - Android Automotive Application"
    description: "Any operations possible as client (Android Automotive UI)"
schemes:
  - "http"
paths:
  /topic:
    get:
      tags:
        - "Administration - OEM-Web Frontend"
        - "Client - Android Automotive Application"
      summary: "Retrieve all existing topics for Notifications."
      description: "Retrieve all possible topics which messages can be published to or clients can subscribe to."
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Topic"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    post:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Store new topic for the Notifications."
      description: "Stores the topic given in the body. If the id is left out one will be generated."
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "new topic to be stored"
          required: true
          schema:
            $ref: "#/definitions/TopicDTO"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "422":
          description: "Unprocessable Entity"

  /topic/{topicId}:
    patch:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Allows update of topic description"
      description: "Updates a topic description, if the topic exists and it is not disabled"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "topicId"
          type: number
          description: "Id of the topic to get updated"
          required: true
        - in: "body"
          name: "TopicUpdateDTO"
          description: "Object with the updated description String"
          required: true
          schema:
            $ref: "#/definitions/TopicUpdateDTO"
      responses:
        200:
          description: "Topic successfully updated"
        404:
          description: "Topic not found"
        423:
          description: "The topic has been deactivated and cannot be changed anymore"
  /signup:
    post:
      tags:
        - "Client - Android Automotive Application"
      summary: "SignUp a new Client"
      description: "Signs a new Client Up to recieve Notifications."
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "The type of the device and an unique Identifier"
          required: true
          schema:
            $ref: "#/definitions/SignUpInfo"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"

  /message:
    get:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Gets all messages with the specified criteria. These are a search string, which must be partially fulfilled, a date range and a topic. If you omit any of these criteria, the search string will be ignored and everything will be returned."
      description: "If at least one message matches the given search criteria it will be sent back with all properties. If not 404 is returned."
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Message"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    post:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Posts a new message the will be published to the appropriate clients"
      description: "Only sender, title, content and either topic or properties need to be set"
      parameters:
        - in: "body"
          name: "body"
          description: "Message to be published"
          required: true
          schema:
            $ref: "#/definitions/MessageDTO"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "422":
          description: "Unprocessable Entity"

  /message/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: number
    get:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Retrieves the message with the given id form the backend"
      description: "If a message with the given id is stored in the backend it will be send as a reply. Otherwise 404 will be returned."
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Message"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    delete:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Deletes Messages with the given id from the backend"
      description: "Deletes unsent Messages with the given id. Returns Bad Request if the message was already sent. Return Not Found if no message with the given id exists."
      responses:
        "200":
          description: OK
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    put:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Updates Message with given id in the backend"
      parameters:
        - in: "body"
          name: "body"
          description: "Message with id to be updated"
          required: true
          schema:
            $ref: "#/definitions/MessageDTO"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"

  /property:
    get:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Retrieves all existing properties in the backend"
      description: "Loads all previously created properties and returns them as a list within the response body."
      responses:
        "200":
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Property"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    post:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Stores a new property in the backend."
      description: "If no id is given a new one will be generated."
      parameters:
        - in: "body"
          name: "body"
          description: "Property to be stored"
          required: true
          schema:
            $ref: "#/definitions/PropertyDTO"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "422":
          description: "Unprocessable Entity"

  /property/{id}:
    parameters: 
      - name: id
        in: path
        required: true
        type: number
    put:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Updates Property with the given id in the backend"
      parameters:
      - in: "body"
        name: "body"
        description: "Property to be stored"
        required: true
        schema:
          $ref: "#/definitions/PropertyEnableDTO"
      responses:
        "200":
          description: "Successful Operation"

  /template:
    post:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Stores a new template in the backend."
      description: "If no id is given a new one will be generated."
      parameters:
        - in: "body"
          name: "body"
          description: "Property to be stored"
          required: true
          schema:
            $ref: "#/definitions/TemplateMessage"
      responses:
        "200":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
    get:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Retrieves all existing templates in the backend"
      description: "Loads all previously created templates and returns them as a list within the response body."
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TemplateMessage"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"

  /template/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: number
    delete:
      tags:
        - "Administration - OEM-Web Frontend"
      summary: "Deletes template"
      description: "Deletes the template with the given id in the backend."
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"


definitions:
  Topic:
    type: "object"
    properties:
      id:
        type: "number"
        example: 42
      binding:
        type: "string"
        example: "/Kultur"
      title:
        type: "string"
        example: "Kultur"
      tags:
        $ref: "#/definitions/Tag"
      description:
        type: "string"
        example: "Hier werden alle kulturbezogenen Themen ver√∂ffentlicht."
      isDeleted:
        type: boolean
        example: false

  TopicDTO:
    type: "object"
    properties:
      binding:
        type: "string"
        example: "/Kultur"
      title:
        type: "string"
        example: "Kultur"
      tags:
        $ref: "#/definitions/Tag"
      description:
        type: "string"
        example: "Hier werden alle kulturbezogenen Themen ver√∂ffentlicht."

  TopicUpdateDTO:
    type: "object"
    properties:
      description:
        type: "string"
        example: "Hier werden alle kulturbezogenen Themen ver√∂ffentlicht."

  SignUpInfo:
    type: "object"
    properties:
      deviceType:
        type: "string"
        example: "Audi A3"
      signUpToken:
        type: string
        format: uuid
        example: "bd604ecb-b6d3-49f7-a0f7-eaff204019be"

  Property:
    type: "object"
    properties:
      id:
        type: number
        example: 3
      name:
        type: "string"
        example: "Audi A3"
      binding:
        type: "string"
        example: "device/audi/a3"
      isDeleted:
        type: boolean
        example: false

  PropertyDTO:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Audi A3"
      binding:
        type: "string"
        example: "device/audi/a3"
  
  PropertyEnableDTO:
    type: "object"
    properties:
      isEnabled:
        type: "boolean"

  Message:
    type: "object"
    properties:
      id:
        type: number
        example: 3
      topic:
        type: "string"
        example: "/Kultur"
      sender:
        type: "string"
        example: "Audi"
      title:
        type: "string"
        example: "Nachrichtentitel"
      content:
        type: "string"
        example: "Textinhalt der Nachricht"
      starttime:
        type: "string"
        format: "date-time"
        example: "2020-08-19T11:32"
      endtime:
        type: "string"
        format: "date-time"
        example: "2020-08-19T11:32"
      isSent:
        type: boolean
        example: false
      properties:
        type: array
        items:
          type: "string"
          example: "device/audi/a3"
      attachment:
        type: "string"
        format: "byte"
        example: "HTP40c5xijnt"
      logoAttachment:
        type: "string"
        format: "byte"
        example: "HTP40c5xijnt"
      links:
        type: "array"
        items:
          type: "string"
          example: "https://uulm.de"
      locationData:
        $ref: "#/definitions/LocationData"
      backgroundColor:
        type: "string"
        example: "#ffffff"
      fontColor:
        type: "string"
        example: "#000000"
      fontFamily:
        $ref: "#/definitions/FontFamily"

  MessageDTO:
    type: "object"
    properties:
      topic:
        type: "string"
        example: "/Kultur"
      sender:
        type: "string"
        example: "Audi"
      title:
        type: "string"
        example: "Nachrichtentitel"
      content:
        type: "string"
        example: "Textinhalt der Nachricht"
      starttime:
        type: "string"
        format: "date-time"
        example: "2020-08-19T11:32"
      endtime:
        type: "string"
        format: "date-time"
        example: "2020-08-19T11:32"
      properties:
        type: array
        items:
          type: "string"
          example: "device/audi/a3"
      attachment:
        type: "string"
        format: "byte"
        example: "HTP40c5xijnt"
      logoAttachment:
        type: "string"
        format: "byte"
        example: "HTP40c5xijnt"
      links:
        type: "array"
        items:
          type: "string"
          example: "https://uulm.de"
      locationData:
        $ref: "#/definitions/LocationData"
      backgroundColor:
        type: "string"
        example: "#ffffff"
      fontColor:
        type: "string"
        example: "#000000"
      fontFamily:
        $ref: "#/definitions/FontFamily"

  TemplateMessage:
    allOf:
      - $ref: "#/definitions/Message"
      - type: object
        properties:
          templateName:
            type: "string"
            example: "Name des Templates"

  LocationData:
    type: "object"
    properties:
      id:
        type: number
        example: 4
      lat:
        type: number
        example: 48.3584855
      lng:
        type: number
        example: 9.9788416
      radius:
        type: number

  Tag:
    type: "string"
    format: "enum"
    example:
      - "Wandern"
      - "Natur"

  FontFamily:
    type: string
    enum:
      - "EXAMPLE_FONT1"
      - "EXAMPLE_FONT2"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
