{{> header}}

{{> global-scripts}}

<div class="container">
  <h3>{{title}}</h3>

  <form enctype="multipart/form-data" action="/publish" onsubmit="return validateForm()"
        name="message" method="post">
    <div class="form-group">
      <label for="topic">Topic:</label>
      <select
          class="browser-default custom-select"
          name="topic" id="topic">
        <option selected></option>
        {{#topics}}
          <option value="{{binding}}">{{title}}</option>
        {{/topics}}
      </select>
    </div>
    <div class="form-group">
      <label>Property:</label>
      {{#properties}}
        <div class="form-check">

          <input
              class="form-check-input"
              name="properties" type="checkbox" value="{{binding}}" id="checkbox{{id}}"/>
          <label class="form-check-label" for="checkbox{{id}}">
            {{name}}
          </label>
        </div>
      {{/properties}}
    </div>
    <div class="form-group">
      <label for="sender">Sender:</label>
      <input class="form-control" name="sender"
             id="sender" placeholder="Sender">
    </div>
    <div class="form-group">
      <label for="title">Title:</label>
      <input class="form-control" name="title"
             id="title" placeholder="Title">
    </div>
    <div class="form-group">
      <label for="content">Message content:</label>
      <textarea class="form-control"
                name="content" id="content" placeholder="Content"></textarea>
    </div>
    <div class="form-group">
      <label for="messagestarttime">Send message at:</label>
      <input class="browser-default custom-select" name="messagestarttime" type="datetime-local"
             id="messagestarttime"/>
    </div>
    <div class="custom-file">
      <input type="file" id="fileSelection" name="file" class="custom-file-input">
      <label class="custom-file-label" for="customFile">Choose file</label>
    </div>
    <div class="form-group">
      <div class="container" id="url-list">
        <label for="urls">Links:</label>
        <button class="btn btn-success" onclick="addItem()" type="button">
          <span>Add URL:</span>
        </button>
      </div>
    </div>
    {{> location-data}}
    <button type="button" onclick="document.getElementById('fileSelection').value = ''"
            class="btn btn-primary">clear
    </button>
    <input type="submit" value="Submit" class="btn btn-primary"/>
  </form>
  <script>
    // Add the following code if you want the name of the file appear on select
    $(".custom-file-input").on("change", function () {
      let fileName = $(this).val().split("\\").pop();
      $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
    });
  </script>
</div>

<script src="js/slider.js"></script>
<script>

  function initialValidationWarnings() {

    let form = document.forms["message"];
    let topic = form["topic"];
    let sender = form["sender"];
    let title = form["title"];
    let content = form["content"];
    let file = document.getElementById("fileSelection");
    let urls = document.getElementById("url-list");
    let lat = form["latTextField"];

    {{#hasTopicPropertiesError}}
      addValidationError(topic, "Either Topics or Properties are required.");
    {{/hasTopicPropertiesError}}

    {{#hasSenderError}}
      addValidationError(sender, "Sender field is required");
    {{/hasSenderError}}

    {{#hasTitleError}}
      addValidationError(title, "Title field is required");
    {{/hasTitleError}}

    {{#hasContentError}}
      addValidationError(content, "Either Content or Files are required.");
      addValidationError(file, "Either Content or Files are required.");
    {{/hasContentError}}

    {{#coordValueRangeError}}
      addValidationError(lat.parentNode, "Please check your coordinate values!");
    {{/coordValueRangeError}}

    {{#onlyOneCoordError}}
      addValidationError(lat.parentNode, "Please enter both coordinate values!")
    {{/onlyOneCoordError}}

    {{#hasUrlError}}
      addValidationError(urls,
          "Please insert URLs in the following Scheme: http://www.example.com .")
    {{/hasUrlError}}
  }

  initialValidationWarnings()

  let cnt = 0;

  function addItem() {
    let id = cnt++;

    let urlList = document.getElementById("url-list");

    let div = document.createElement("div");
    div.classList.add("row");
    div.id = "url-" + id;
    div.classList.add("input-group");

    let input = document.createElement("input");
    input.type = "text";
    input.name = "urls";
    input.placeholder = "http://www.example.com";
    input.classList.add("form-control");
    input.classList.add("url-lst")

    let removeButtonInfo = document.createElement("span");
    removeButtonInfo.textContent = "Remove URL";

    let removeButton = document.createElement("button");
    removeButton.type = "button";
    removeButton.classList.add("btn");
    removeButton.classList.add("btn-danger");
    removeButton.appendChild(removeButtonInfo);
    removeButton.addEventListener('click', function () {
      removeItem(id);
    });

    div.appendChild(input);
    div.appendChild(removeButton);

    urlList.appendChild(div);
  }

  function removeItem(number) {
    let id = "url-" + number;
    let item = document.getElementById(id);
    item.remove();
  }

  /**
   * Validates the message Form
   * @returns {boolean} true if the Form is valid
   */
  function validateForm() {
    let isValid = true;
    let form = document.forms["message"];

    let topic = form["topic"];
    let properties = form["properties"];

    let sender = form["sender"];
    let title = form["title"];

    let content = form["content"];
    let file = form["file"];

    let urls = form.querySelectorAll(".url-lst");

    let lat = form["latTextField"];
    let lng = form["lngTextField"];

    // topic or properties required

    if (topic.value === "") {
      let hasSelectedProperty = false;
      if (properties != null) {
        properties.forEach(option => {
          if (option.checked) {
            hasSelectedProperty = true;
          }
        });
      }
      if (!hasSelectedProperty) {
        isValid = false;

        if (properties != null) {
          if (properties.length === undefined) {
            properties.classList.add("is-invalid");
          } else {
            properties.forEach(option => {
              option.classList.add("is-invalid");
            });
          }
          if (properties.parentNode != null && properties.parentNode.querySelector(
              '.invalid-feedback') == null) {
            addValidationError(properties, "Either Topics or Properties are required.")
          }
        }

        if (topic.parentNode.querySelector('.invalid-feedback') == null) {
          addValidationError(topic, "Either Topics or Properties are required.");
        }
      }
    } else {
      removeValidationError(topic);

      if (properties != null) {
        properties.forEach(option => {
          removeValidationError(option);
        });
        if (properties.length === undefined) {
          properties.classList.remove("is-invalid");
        } else {
          properties.forEach(option => {
            option.classList.remove("is-invalid");
          })
        }
      }
    }

    // sender required

    if (sender.value === "") {
      isValid = false;
      if (sender.parentNode.querySelector('.invalid-feedback') == null) {
        addValidationError(sender, "Sender field is required");
      }
    } else {
      removeValidationError(sender);
    }

    // title required

    if (title.value === "") {
      isValid = false;
      if (title.parentNode.querySelector('.invalid-feedback') == null) {
        addValidationError(title, "Title field is required");
      }
    } else {
      removeValidationError(title);
    }

    // content or file required

    if (content.value === "" && file.files.length === 0) {
      isValid = false;
      if (content.parentNode.querySelector('.invalid-feedback') == null) {
        addValidationError(content, "Either Content or Files are required.");
      }
      if (file.parentNode.querySelector('.invalid-feedback') == null) {
        addValidationError(file, "Either Content or Files are required.");
      }
    } else {
      removeValidationError(content);
      removeValidationError(file);
    }

    // max file size

    if (!(file.files.length === 0) && file.files[0].size > 128000) {
      isValid = false;
      if (file.parentNode.querySelector('.invalid-feedback') == null) {
        addValidationError(file, "Only Files up to 128 kB are Supported!");
      }
    } else {
      removeValidationError(file);
    }

    // url schema validation
    let urlRegex = new RegExp(
        "((http|https)\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")
    urls.forEach(url => {
      if (!urlRegex.test(url.value)) {
        console.log("valid")
        if (url.parentNode.querySelector(".invalid-feedback") == null) {
          addValidationError(url,
              "Please insert URLs in the following Scheme: http://www.example.com .")
        }
      } else {
        removeValidationError(url);
      }

    });

    // check for valid boundaries and completeness (lat and long entered)
    if (lat.value < -90 || lat.value > 90 || lng.value < -180 || lng.value > 180) {
      removeValidationError(lat.parentNode)
      isValid = false;
      addValidationError(lat.parentNode, "Please check your coordinate values!");
    } else if ((lat.value === "" && lng.value !== "") || (lat.value !== "" && lng.value === "")) {
      removeValidationError(lat.parentNode)
      isValid = false;
      addValidationError(lat.parentNode, "Please enter both coordinate values!")
    } else {
      removeValidationError(lat.parentNode)
    }

    // if location data tab is collapsed, content will not be sent.
    if(isValid){
        var locationDataCollapsed = document.getElementById("collapseButton").classList.contains("collapsed")
        if(locationDataCollapsed){
            document.getElementById("latTextField").disabled = true;
            document.getElementById("lngTextField").disabled = true;
            document.getElementById("radiusRange").disabled = true;
        }
    }

    return isValid;
  }

  /**
   * Adds a div containing the Error text for a given node to the parent of this node.
   * @param node to which the error belongs
   * @param errorText text of the error
   */
  function addValidationError(node, errorText) {
    let errorDiv = document.createElement("div");
    errorDiv.classList.add("invalid-feedback");
    errorDiv.innerHTML = errorText;

    node.classList.add("is-invalid");
    node.parentNode.appendChild(errorDiv);
  }

  /**
   * Removes the div containing the error for the given node
   * @param node
   */
  function removeValidationError(node) {
    if (node != null) {
      node.classList.remove('is-invalid');
      let queryNode = node.parentNode.querySelector('.invalid-feedback');
      if (queryNode != null) {
        queryNode.remove();
      }
    }
  }
</script>
{{> footer}}